package Panels.Converter;

import Mainpackage.*;

public class Volume extends javax.swing.JPanel {

    double m;

    public Volume() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ApplicationWindow = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        TypeDisplay = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TypeDisplay1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        validity1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        ApplicationWindow.setMinimumSize(new java.awt.Dimension(700, 500));
        ApplicationWindow.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Volume Conversion");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("To:");

        jComboBox1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Cubic meter", "Cubic decimeter", "Cubic centimeter", "Cubic millimeter", "Hectoliter", "Liter", "Deciliter", "Centileter", "Milliliter", "Cubic foot", "Cubic inch", "Cubic yard" }));

        jComboBox2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Cubic meter", "Cubic decimeter", "Cubic centimeter", "Cubic millimeter", "Hectoliter", "Liter", "Deciliter", "Centileter", "Milliliter", "Cubic foot", "Cubic inch", "Cubic yard" }));

        TypeDisplay.setBackground(new java.awt.Color(204, 204, 204));
        TypeDisplay.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        TypeDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TypeDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TypeDisplayKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("From:");

        TypeDisplay1.setEditable(false);
        TypeDisplay1.setBackground(new java.awt.Color(204, 204, 204));
        TypeDisplay1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        TypeDisplay1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton3.setBackground(new java.awt.Color(44, 60, 76));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Convert");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(700, 2));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        validity1.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        validity1.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout ApplicationWindowLayout = new javax.swing.GroupLayout(ApplicationWindow);
        ApplicationWindow.setLayout(ApplicationWindowLayout);
        ApplicationWindowLayout.setHorizontalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ApplicationWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(184, 184, 184))
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(TypeDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                                .addComponent(TypeDisplay1))
                            .addComponent(validity1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ApplicationWindowLayout.setVerticalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TypeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validity1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TypeDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        validity1.getAccessibleContext().setAccessibleName("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(ApplicationWindow, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void TypeDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TypeDisplayKeyPressed
        
                                           
        try{
            double i = Double.parseDouble(TypeDisplay.getText());
            validity1.setText("");
        }catch(NumberFormatException e1){
            validity1.setText("Invalid Input");
        }
        
    }//GEN-LAST:event_TypeDisplayKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            //:::::::::::::::::Getting Selected item from input combobox:::::::::::::::::://
            String box1 = (String)jComboBox1.getSelectedItem();

            //Comparing the selected item
            //Changing the input value to base value(Cubic Meter)
            switch (box1) {
                case "Cubic meter":
                    double cubmeter = Double.parseDouble(TypeDisplay.getText());
                    m = cubmeter;
                    break;
                    
                case "Cubic decimeter":
                    double KilometerToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = KilometerToMeter*1000.0;
                    break;
                    
                case "Cubic centimeter":
                    double CentimeterToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = CentimeterToMeter/100.0;
                    break;
                    
                case "Cubic millimeter":
                    double MillimeterToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = MillimeterToMeter/1000.0;
                    break;
                    
                case "Cubic foot":
                    double MicrometerToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = MicrometerToMeter/1000000.0;
                    break;
                    
                case "Cubic inch":
                    double NanometerToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = NanometerToMeter/1000000000.0;
                    break;
                    
                case "Cubic yard":
                    double PicometerToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = PicometerToMeter/1000000000000.0;
                    break;
                    
                case "Hectoliter":
                    double ParsecToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = ParsecToMeter*30856775812799588.00;
                    break;
                    
                case "Liter":
                    double Light_yearToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = Math.pow(10,15)*9.46073047258*Light_yearToMeter;
                    break;
                    
                case "Deciliter":
                    double Lunar_distanceToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = Lunar_distanceToMeter*384000098.304;
                    break;
                    
                case "Centiliter":
                    double Astronomical_unitToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = Astronomical_unitToMeter*149597870691.00;
                    break;
                case "Milliliter":
                    double Astronomica_unitToMeter = Double.parseDouble(TypeDisplay.getText());
                    m = Astronomica_unitToMeter*149597870691.00;
                    break;
                default:
                    throw new InputException("Select a temperature unit.");
            }

            
            //::::::::::::::::::Getting Selected item from output combobox::::::::::::::://
            String box2 = (String)jComboBox2.getSelectedItem();

            //Comparing the selected item
            //Changing(from Cubic Meter) the output value to desired value 
            switch (box2) {
                case "Cubic meter":
                    double MeterToMeter = m;
                    TypeDisplay1.setText(String.valueOf(MeterToMeter));
                    break;
                    
                case "Cubic decimeter":
                    double MeterTOKilometer = (m*.001);
                    TypeDisplay1.setText(String.valueOf(MeterTOKilometer));
                    break;
                    
                case "Cubic centimeter":
                    double CentimeterToMeter = m/100.0;
                    TypeDisplay1.setText(String.valueOf(CentimeterToMeter));
                    break;
                    
                case "Cubic millimeter":
                    double MillimeterToMeter = m/1000.0;
                    TypeDisplay1.setText(String.valueOf(MillimeterToMeter));
                    break;
                    
                case "Cubic foot":
                    double MicrometerToMeter = m/1000000.0;
                    TypeDisplay1.setText(String.valueOf(MicrometerToMeter));
                    break;
                    
                case "Cubic inch":
                    double NanometerToMeter = m/1000000000.0;
                    TypeDisplay1.setText(String.valueOf(NanometerToMeter));
                    break;
                    
                case "Cubic yard":
                    double PicometerToMeter = m/1000000000000.0;
                    TypeDisplay1.setText(String.valueOf(PicometerToMeter));
                    break;
                    
                case "Hectoliter":
                    double Nautical_mileToMeter = m*1852.0;
                    TypeDisplay1.setText(String.valueOf(Nautical_mileToMeter));
                    break;
                    
                case "Liter":
                    double MileToMeter = m*1609.34;
                    TypeDisplay1.setText(String.valueOf(MileToMeter));
                    break;
                    
                case "Deciliter":
                    double Yard = m*0.9144;
                    TypeDisplay1.setText(String.valueOf(Yard));
                    break;
                    
                case "Centiliter":
                    double FootToMeter = m*0.3048;
                    TypeDisplay1.setText(String.valueOf(FootToMeter));
                    break;
                    
                case "Milliliter":
                    double InchToMeter = m*0.0254;
                    TypeDisplay1.setText(String.valueOf(InchToMeter));
                    break;
                    
                default:
                    throw new InputException("Select a temperature unit.");
            }
        }catch(InputException e){
            
        }catch(Exception e){
            ErrorWindow ob = new ErrorWindow();        
            ob.setErrorText("Invalid Input");
            ob.setVisible(true);
        }   
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ApplicationWindow;
    private javax.swing.JTextField TypeDisplay;
    private javax.swing.JTextField TypeDisplay1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel validity1;
    // End of variables declaration//GEN-END:variables
}
