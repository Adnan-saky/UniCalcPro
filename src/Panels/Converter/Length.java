package Panels.Converter;

import Mainpackage.*;

public class Length extends javax.swing.JPanel {

    double input;
    
    public Length() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ApplicationWindow = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        Display = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Display1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        validity1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 153));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        ApplicationWindow.setMinimumSize(new java.awt.Dimension(700, 500));
        ApplicationWindow.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Length Conversion");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("To:");

        jComboBox1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Meter", "Kilometer", "Centimeter", "Millimeter", "Micrometer", "Nanometer", "Picometer", "Nautical mile", "Mile", "Yard", "Foot", "Inch", "Parsec", "Lunar distance", "Astronomical unit", "Light year" }));

        jComboBox2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Meter", "Kilometer", "Centimeter", "Millimeter", "Micrometer", "Nanometer", "Picometer", "Nautical mile", "Mile", "Yard", "Foot", "Inch", "Parsec", "Lunar distance", "Astronomical unit", "Light year" }));

        Display.setBackground(new java.awt.Color(204, 204, 204));
        Display.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Display.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });
        Display.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DisplayKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("From:");

        Display1.setEditable(false);
        Display1.setBackground(new java.awt.Color(204, 204, 204));
        Display1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Display1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Display1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Display1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(44, 60, 76));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Convert");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 2));
        jPanel2.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        validity1.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        validity1.setForeground(new java.awt.Color(238, 3, 3));

        javax.swing.GroupLayout ApplicationWindowLayout = new javax.swing.GroupLayout(ApplicationWindow);
        ApplicationWindow.setLayout(ApplicationWindowLayout);
        ApplicationWindowLayout.setHorizontalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addGap(275, 275, 275)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ApplicationWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(203, 203, 203))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(352, Short.MAX_VALUE))
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Display, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                .addComponent(Display1))
                            .addComponent(validity1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        ApplicationWindowLayout.setVerticalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ApplicationWindowLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validity1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Display1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(ApplicationWindow, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void Display1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Display1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Display1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try{
            //:::::::::::::::::Getting Selected item from input combobox:::::::::::::::::://
            String box1 = (String)jComboBox1.getSelectedItem();

            //Comparing the selected item
            //Changing the input value to base value(Meter)
            switch (box1) {
            case "Meter":
                double Meter = Double.parseDouble(Display.getText());
                input = Meter;
                break;
            case "Kilometer":
                double KilometerToMeter = Double.parseDouble(Display.getText());
                input = KilometerToMeter*1000.0;
                break;
            case "Centimeter":
                double CentimeterToMeter = Double.parseDouble(Display.getText());
                input = CentimeterToMeter/100.0;
                break;
            case "Millimeter":
                double MillimeterToMeter = Double.parseDouble(Display.getText());
                input = MillimeterToMeter/1000.0;
                break;
            case "Micrometer":
                double MicrometerToMeter = Double.parseDouble(Display.getText());
                input = MicrometerToMeter/1000000.0;
                break;
            case "Nanometer":
                double NanometerToMeter = Double.parseDouble(Display.getText());
                input = NanometerToMeter/1000000000.0;
                break;
            case "Picometer":
                double PicometerToMeter = Double.parseDouble(Display.getText());
                input = PicometerToMeter/1000000000000.0;
                break;
            case "Nautical mile":
                double Nautical_mileToMeter = Double.parseDouble(Display.getText());
                input = Nautical_mileToMeter*1852.0;
                break;
            case "Mile":
                double MileToMeter = Double.parseDouble(Display.getText());
                input = MileToMeter*1609.34;
                break;
            case "Yard":
                double Yard = Double.parseDouble(Display.getText());
                input = Yard*0.9144;
                break;
            case "Foot":
                double FootToMeter = Double.parseDouble(Display.getText());
                input = FootToMeter*0.3048;
                break;
            case "Inch":
                double InchToMeter = Double.parseDouble(Display.getText());
                input = InchToMeter*0.0254;
                break;
            case "Parsec":
                double ParsecToMeter = Double.parseDouble(Display.getText());
                input = ParsecToMeter*30856775812799588.00;
                break;
            case "Light year":
                double Light_yearToMeter = Double.parseDouble(Display.getText());
                input = Math.pow(10,15)*9.46073047258*Light_yearToMeter;
                break;
            case "Lunar distance":
                double Lunar_distanceToMeter = Double.parseDouble(Display.getText());
                input = Lunar_distanceToMeter*384000098.304;
                break;
            case "Astronomical unit":
                double Astronomical_unitToMeter = Double.parseDouble(Display.getText());
                input = Astronomical_unitToMeter*149597870691.00;
                break;
                    
                default:
                    throw new InputException("Select a length unit.");
            }


            //::::::::::::::::::Getting Selected item from output combobox::::::::::::::://
            String box2 = (String)jComboBox2.getSelectedItem();

            //Comparing the selected item
            //Changing(from Meter) the output value to desired value
            switch (box2) {
            case "Meter":
                double MeterToMeter = input;
                Display1.setText(String.valueOf(MeterToMeter));
                break;
            case "Kilometer":
                double MeterTOKilometer = (input*.001);
                Display1.setText(String.valueOf(MeterTOKilometer));
                break;
            case "Centimeter":
                double CentimeterToMeter = input/100.0;
                Display1.setText(String.valueOf(CentimeterToMeter));
                break;
            case "Millimeter":
                double MillimeterToMeter = input/1000.0;
                Display1.setText(String.valueOf(MillimeterToMeter));
                break;
            case "Micrometer":
                double MicrometerToMeter = input/1000000.0;
                Display1.setText(String.valueOf(MicrometerToMeter));
                break;
            case "Nanometer":
                double NanometerToMeter = input/1000000000.0;
                Display1.setText(String.valueOf(NanometerToMeter));
                break;
            case "Picometer":
                double PicometerToMeter = input/1000000000000.0;
                Display1.setText(String.valueOf(PicometerToMeter));
                break;
            case "Nautical mile":
                double Nautical_mileToMeter = input*1852.0;
                Display1.setText(String.valueOf(Nautical_mileToMeter));
                break;
            case "Mile":
                double MileToMeter = input*1609.34;
                Display1.setText(String.valueOf(MileToMeter));
                break;
            case "Yard":
                double Yard = input*0.9144;
                Display1.setText(String.valueOf(Yard));
                break;
            case "Foot":
                double FootToMeter = input*0.3048;
                Display1.setText(String.valueOf(FootToMeter));
                break;
            case "Inch":
                double InchToMeter = input*0.0254;
                Display1.setText(String.valueOf(InchToMeter));
                break;
            case "Parsec":
                double ParsecToMeter = input*30856775812799588.00;
                Display1.setText(String.valueOf(ParsecToMeter));
                break;
            case "Light year":
                double Light_yearToMeter = Math.pow(10,15)*9.46073047258*input;
                Display1.setText(String.valueOf(Light_yearToMeter));
                break;
            case "Lunar distance":
                double Lunar_distanceToMeter = input*384000098.304;
                Display1.setText(String.valueOf(Lunar_distanceToMeter));
                break;
            case "Astronomical unit":
                double Astronomical_unitToMeter = input*149597870691.00;
                Display1.setText(String.valueOf(Astronomical_unitToMeter));
                break;
                
                default:
                    throw new InputException("Select a length unit.");
            }
        
        }catch(InputException e){
            
        }catch(Exception e){
            ErrorWindow ob = new ErrorWindow();        
            ob.setErrorText("Invalid Input");
            ob.setVisible(true);
        }  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DisplayKeyPressed
                                           
        
        try{
            double i = Double.parseDouble(Display.getText());
            validity1.setText("");
        }catch(NumberFormatException e1){
            validity1.setText("Invalid Input");
        }
        
    }//GEN-LAST:event_DisplayKeyPressed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisplayActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ApplicationWindow;
    private javax.swing.JTextField Display;
    private javax.swing.JTextField Display1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel validity1;
    // End of variables declaration//GEN-END:variables
}
