package Panels.Converter;

import Mainpackage.*;
import java.text.DecimalFormat;


/**
 *
 * @author msi
 */
public class Money extends javax.swing.JPanel {

    private static DecimalFormat df2 = new DecimalFormat(".##");
    
    public Money() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ApplicationWindow = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fromCombo = new javax.swing.JComboBox<>();
        toCombo = new javax.swing.JComboBox<>();
        fromField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        ConvertButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 0, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        ApplicationWindow.setMinimumSize(new java.awt.Dimension(700, 500));
        ApplicationWindow.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Money Conversion");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("To:");

        fromCombo.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        fromCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Bangladesh(BDT)", "United States(USD)", "Europe(EUR)", "Japan(JPY)", "Hong Kong(HKD)", "Britain(GBP)", "India(INR)", "Kuwait(KWD)", "New Zealand(NZD)", "Saudi Arabia(SAR)", "South Korea(KRW)" }));

        toCombo.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        toCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Bangladesh(BDT)", "United States(USD)", "Europe(EUR)", "Japan(JPY)", "Hong Kong(HKD)", "Britain(GBP)", "India(INR)", "Kuwait(KWD)", "New Zealand(NZD)", "Saudi Arabia(SAR)", "South Korea(KRW)" }));

        fromField.setBackground(new java.awt.Color(204, 204, 204));
        fromField.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        fromField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("From:");

        toField.setEditable(false);
        toField.setBackground(new java.awt.Color(204, 204, 204));
        toField.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        toField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton2.setBackground(new java.awt.Color(44, 60, 76));
        jButton2.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Edit Unit");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        ConvertButton.setBackground(new java.awt.Color(44, 60, 76));
        ConvertButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ConvertButton.setForeground(new java.awt.Color(255, 255, 255));
        ConvertButton.setText("Convert");
        ConvertButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 2));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ApplicationWindowLayout = new javax.swing.GroupLayout(ApplicationWindow);
        ApplicationWindow.setLayout(ApplicationWindowLayout);
        ApplicationWindowLayout.setHorizontalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ApplicationWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ConvertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ApplicationWindowLayout.createSequentialGroup()
                        .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2)
                            .addComponent(fromField, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .addComponent(toField))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ApplicationWindowLayout.createSequentialGroup()
                .addContainerGap(220, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(194, 194, 194))
        );
        ApplicationWindowLayout.setVerticalGroup(
            ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ApplicationWindowLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addGroup(ApplicationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConvertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(ApplicationWindow, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void ConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertButtonActionPerformed
        double fromInt, toInt=0;
        
        double fUSD=84.24, fEUR=94.30, fJPY=0.76, fHKD=10.73, fGBP=110.45;
        double fINR=1.22, fKWD=276.60, fNZD=56.80, fSAR=22.46, fKRW=0.074;
        
        try{
            ////:::::::::::::::::::::Taking Inputs::::::::::::::::::////
            fromInt = Double.parseDouble(fromField.getText());
            //input cannot be a negative value, so handling the exception for this.
            if(fromInt<0)
                throw new InputException("Invalid Input.");
                
            
            //:::::::::::::::::Getting Selected item from input combobox:::::::::::::::::://
            //Comparing the selected item
            //Changing the input value to base value(Taka)
            switch (fromCombo.getSelectedItem().toString()) {
                case "Bangladesh(BDT)":
                    fromInt= fromInt * 1;
                    break;
                    
                case "United States(USD)":
                    fromInt= fromInt * fUSD;
                    break;
                    
                case "Europe(EUR)":
                    fromInt= fromInt * fEUR;
                    break;
                    
                case "Japan(JPY)":
                    fromInt= fromInt * fJPY;
                    break;
                    
                case "Hong Kong(HKD)":
                    fromInt= fromInt * fHKD;
                    break;
                    
                case "Britain(GBP)":
                    fromInt= fromInt * fGBP;
                    break;
                    
                case "India(INR)":
                    fromInt= fromInt * fINR;
                    break;
                    
                case "Kuwait(KWD)":
                    fromInt= fromInt * fKWD;
                    break;
                    
                case "New Zealand(NZD)":
                    fromInt= fromInt * fNZD;
                    break;
                    
                case "Saudi Arabia(SAR)":
                    fromInt= fromInt * fSAR;
                    break;
                    
                case "South Korea(KRW)":
                    fromInt= fromInt * fKRW;
                    break;
                    
                default:
                    throw new InputException("Select a currency unit.");
            }
            
            
            //::::::::::::::::::Getting Selected item from output combobox::::::::::::::://
            //Comparing the selected item
            //Changing the output value to desired value
            switch (toCombo.getSelectedItem().toString()) {
                case "Bangladesh(BDT)":                
                    toInt=fromInt;
                    break;
                    
                case "United States(USD)":
                    toInt=fromInt / fUSD;
                    break;
                    
                case "Europe(EUR)":
                    toInt=fromInt / fEUR;
                    break;
                    
                case "Japan(JPY)":
                    toInt=fromInt / fJPY;
                    break;
                    
                case "Hong Kong(HKD)":
                    toInt=fromInt / fHKD;
                    break;
                    
                case "Britain(GBP)":
                    toInt=fromInt / fGBP;
                    break;
                    
                case "India(INR)":
                    toInt=fromInt / fINR;
                    break;
                    
                case "Kuwait(KWD)":
                    toInt=fromInt / fKWD;
                    break;
                    
                case "New Zealand(NZD)":
                    toInt=fromInt / fNZD;
                    break;
                    
                case "Saudi Arabia(SAR)":
                    toInt=fromInt / fSAR;
                    break;
                    
                case "South Korea(KRW)":
                    toInt=fromInt / fKRW;
                    break;
                    
                default:
                    throw new InputException("Select a currency unit.");
            }
            
            
            //::::::::::::::::::setting the desired answer::::::::::::::://
            toInt=Double.parseDouble(df2.format(toInt));
            toField.setText(Double.toString(toInt));

        }catch(InputException e){
            
        }catch(Exception e){
            ErrorWindow ob = new ErrorWindow();        
            ob.setErrorText("Invalid Input");
            ob.setVisible(true);
        }
    }//GEN-LAST:event_ConvertButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ApplicationWindow;
    private javax.swing.JButton ConvertButton;
    private javax.swing.JComboBox<String> fromCombo;
    private javax.swing.JTextField fromField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> toCombo;
    private javax.swing.JTextField toField;
    // End of variables declaration//GEN-END:variables
}
